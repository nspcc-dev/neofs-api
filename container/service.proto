syntax = "proto3";
package container;
option go_package = "github.com/nspcc-dev/neofs-api-go/container";
option csharp_namespace = "NeoFS.API.Container";

import "acl/types.proto";
import "container/types.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.stable_marshaler_all) = true;

// Container service provides API for manipulating with the container.
service Service {
    // Put request proposes container to the inner ring nodes. They will
    // accept new container if user has enough deposit. All containers
    // are accepted by the consensus, therefore it is asynchronous process.
    rpc Put(PutRequest) returns (PutResponse);

    // Delete container removes it from the inner ring container storage. It
    // also asynchronous process done by consensus.
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    // Get container returns container instance
    rpc Get(GetRequest) returns (GetResponse);

    // List returns all user's containers
    rpc List(ListRequest) returns (ListResponse);

    // SetExtendedACL changes extended ACL rules of the container
    rpc SetExtendedACL(SetExtendedACLRequest) returns (SetExtendedACLResponse);

    // GetExtendedACL returns extended ACL rules of the container
    rpc GetExtendedACL(GetExtendedACLRequest) returns (GetExtendedACLResponse);
}

message PutRequest {
    // Container to create in NeoFS.
    container.Container Container = 1;
    // PublicKey of container owner. It can be public key of the owner
    // or it can be public key that bound in neofs.id smart-contract.
    bytes PublicKey = 2;
    // Signature of stable-marshalled container according to RFC-6979.
    bytes Signature = 3;
}

message PutResponse {
    // CID (container id) is a SHA256 hash of the container structure
    bytes CID = 1 [(gogoproto.customtype) = "CID", (gogoproto.nullable) = false];
}

message DeleteRequest {
    // ContainerID of container to delete from NeoFS.
    bytes ContainerID = 1;
    // Signature of container id according to RFC-6979.
    bytes Signature   = 2;
}

// DeleteResponse is empty because delete operation is asynchronous and done
// via consensus in inner ring nodes
message DeleteResponse { }


message GetRequest {
    // CID (container id) is a SHA256 hash of the container structure
    bytes CID                                = 1 [(gogoproto.customtype) = "CID", (gogoproto.nullable) = false];
}

message GetResponse {
    // Container is a structure that contains placement rules and owner id
    container.Container Container = 1;
}

message ListRequest {
    // OwnerID is a wallet address
    bytes OwnerID                            = 1 [(gogoproto.customtype) = "OwnerID", (gogoproto.nullable) = false];
}

message ListResponse {
    // CID (container id) is list of SHA256 hashes of the container structures
    repeated bytes CID = 1 [(gogoproto.customtype) = "CID", (gogoproto.nullable) = false];
}

message SetExtendedACLRequest {
    // EACL to set for the container.
    acl.EACLTable EACL = 1;
    // Signature of stable-marshalled Extended ACL according to RFC-6979.
    bytes Signature    = 2;
}

message SetExtendedACLResponse {}

message GetExtendedACLRequest {
    // ContainerID of the container that has Extended ACL.
    bytes ContainerID = 1;
}

message GetExtendedACLResponse {
    // EACL that has been requested if it was set up.
    acl.EACLTable EACL = 1;
    // Signature of stable-marshalled Extended ACL according to RFC-6979.
    bytes Signature    = 2;
}
